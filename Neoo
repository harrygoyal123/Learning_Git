variable "name" {
  description = "Specifies the name of the job definition"
  type        = string
}

variable "type" {
  description = "The type of job definition. Must be 'container'"
  type        = string
}

variable "container_properties" {
  description = "A valid container properties provided as a single valid JSON document. Required if 'type' is 'container'"
  type        = string
  default     = null
}

variable "parameters" {
  description = "Specifies the parameter substitution placeholders to set in the job definition"
  type        = map(string)
  default     = {}
}

variable "platform_capabilities" {
  description = "The platform capabilities required by the job definition. Defaults to 'EC2'"
  type        = string
  default     = "EC2"
}

variable "propagate_tags" {
  description = "Specifies whether to propagate the tags from the job definition to the corresponding Amazon ECS task. Defaults to false"
  type        = bool
  default     = false
}

variable "retry_strategy_attempts" {
  description = "The number of times to move a job to the RUNNABLE status. Must be between 1 and 10."
  type        = number
  default     = null
}

variable "retry_strategy_evaluate_on_exit_action" {
  description = "The action to take if all of the specified conditions are met"
  type        = string
  default     = ""
}

variable "retry_strategy_evaluate_on_exit_on_exit_code" {
  description = "A glob pattern to match against the decimal representation of the exit code returned for a job"
  type        = string
  default     = ""
}

variable "retry_strategy_evaluate_on_exit_on_reason" {
  description = "A glob pattern to match against the reason returned for a job"
  type        = string
  default     = ""
}

variable "retry_strategy_evaluate_on_exit_on_status_reason" {
  description = "A glob pattern to match against the status reason returned for a job"
  type        = string
  default     = ""
}

variable "tags" {
  description = "Key-value map of resource tags"
  type        = map(string)
  default     = {}
}

variable "timeout_attempt_duration_seconds" {
  description = "The time duration in seconds after which AWS Batch terminates your jobs if they have not finished"
  type        = number
  default     = null
}




resource "aws_batch_job_definition" "example" {
  name = var.name
  type = var.type

  container_properties = var.container_properties

  parameters = var.parameters

  platform_capabilities = var.platform_capabilities
  propagate_tags        = var.propagate_tags

  retry_strategy {
    attempts = var.retry_strategy_attempts

    evaluate_on_exit {
      action                 = var.retry_strategy_evaluate_on_exit_action
      on_exit_code           = var.retry_strategy_evaluate_on_exit_on_exit_code
      on_reason              = var.retry_strategy_evaluate_on_exit_on_reason
      on_status_reason       = var.retry_strategy_evaluate_on_exit_on_status_reason
    }
  }

  tags = var.tags

  timeout {
    attempt_duration_seconds = var.timeout_attempt_duration_seconds
  }
}





module "aws_batch_job_definition" {
  source = "path/to/module"

  name = "my-job-definition"
  type = "container"

  container_properties = <<EOT
    {
      "image": "my-container-image",
      "vcpus": 2,
      "memory": 4096
    }
  EOT

  parameters = {
    input_file  = "input.txt"
    output_file = "output.txt"
  }

  platform_capabilities = "FARGATE"
  propagate_tags        = true

  retry_strategy_attempts                          = 3
  retry_strategy_evaluate_on_exit_action           = "RETRY"
  retry_strategy_evaluate_on_exit_on_exit_code     = "*"
  retry_strategy_evaluate_on_exit_on_reason        = "Error*"
  retry_strategy_evaluate_on_exit_on_status_reason = null

  tags = {
    Environment = "Production"
    Project     = "MyProject"
  }

  timeout_attempt_duration_seconds = 3600
}


