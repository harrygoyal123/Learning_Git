- name: display pre database software install message
  remote_user: "{{ root_user }}"
  debug:
    msg:
      - 'Oracle Database Software 19c Installation started for Single Instance at {{ansible_date_time.iso8601}}:'

- name: Ensure free space on disk is more than 7.2 GB
  assert:
    that: item.size_available > 7200000000
    msg: "warning: disk space is low"
  when: item.mount == mount_directory
  with_items: "{{ ansible_mounts }}"
  no_log: true

- debug:
    msg: "checking resource limits"

- name: check file descriptor soft limit
  shell:
    cmd: ulimit -Sn
  register: limits

- name: ---
  fail:
    msg: "warning: file descriptor soft limit is {{ limits.stdout }}"
  ignore_errors: yes
  when: limits.stdout | int < 1024

- name: check file descriptor hard limit
  shell:
    cmd: ulimit -Hn
  register: limits

- name: ---
  fail:
    msg: "warning: file descriptor hard limit is {{ limits.stdout }}"
  ignore_errors: yes
  when: limits.stdout | int < 4096

- name: check available processes soft limit
  shell:
    cmd: ulimit -Su
  register: limits

- name: ---
  fail:
    msg: "warning: available processes soft limit is {{ limits.stdout }}"
  ignore_errors: yes
  when: limits.stdout | int < 2047

- name: check available processes hard limit
  shell:
    cmd: ulimit -Hu
  register: limits

- name: ---
  fail:
    msg: "warning: available processes hard limit is {{ limits.stdout }}"
  ignore_errors: yes
  when: limits.stdout | int < 7258

- name: check stack segment soft limit
  shell:
    cmd: ulimit -Ss
  register: limits

- name: ---
  fail:
    msg: "warning: stack segment soft limit is {{ limits.stdout }}"
  ignore_errors: yes
  when: limits.stdout | int < 8192

- name: check stack segment hard limit
  shell:
    cmd: ulimit -Hs
  register: limits

- name: create required directories
  remote_user: "{{ root_user }}"
  file:
    path="{{ item }}"
    state=directory
    owner="{{ oracle_user }}"
    mode=0775
  with_items:
    - "{{ root_directory }}"
    - "{{ scripts_directory }}"
    - "{{ oracle_inventory }}"
    - "{{ oracle_base }}"
    - "{{ stage_dir }}"
    - "{{ oracle_home }}"
  tags:
   - db19c_createinventory

- name: Copy preinstall-19c package to target database server
  copy: src=roles/OracleDB/files/{{ item }} dest={{ stage_dir }} mode=0755 owner="{{ oracle_user }}" 
  with_items:
     - oracle-database-preinstall-19c-1.0-1.el7.src.rpm
  tags:
   - db19c_preinstpkg

- name: Execute rpm package 
  remote_user: "{{ root_user }}"
  become: yes
  command: rpm -U "/{{ stage_dir }}/{{ preinstall_pkg }}"
  args:
    warn: false
  register: db19c_prerpm_install
  tags:
   - db19c_preinstpkg

- name: Download Oracle 19c archive from server
  get_url:
    url: "{{ oracle19c_url }}"
    dest: "/tmp/u01/stage/LINUX.X64_193000_db_home.zip"
    mode: '0775'
  tags:
    - download_oracle19c

- name: Unpack Oracle 19c Database Software to the target server
  remote_user: "{{ root_user }}"
  become: yes
  become_user: "{{ oracle_user }}"
  unarchive:
     src=/tmp/u01/stage/LINUX.X64_193000_db_home.zip
     dest=/u01/app/oracle/product/19.3.0/db100
     remote_src=no
     mode=0775
     owner="{{ oracle_user }}"
  tags:
   - db19c_unpackdbsoftware

- name: Setup Oracle 19c Database Software silent response file
  remote_user: "{{ root_user }}"
  become: yes
  become_user: "{{ oracle_user }}"
  template: src=roles/dbsoftware19c_install/templates/{{ oradbsoft_rsp }}.rsp.j2 dest={{ stage_dir }}/{{ oradbsoft_rsp }}.rsp mode=0755
  tags:
   - db19c_setuprspfile

- name: Install Oracle 19c Database Software
  remote_user: "{{ root_user }}"
  become: yes
  become_user: "{{ oracle_user }}"
  shell: "{{ oracle_home }}/runInstaller -silent -responseFile {{ stage_dir }}/{{ oradbsoft_rsp }}.rsp -noconfig -ignorePrereqFailure"
  ignore_errors: True
  tags:
   - dbsoft19c_install
