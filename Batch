# example.tf compute environment 

module "aws_batch_compute_environment" {
  source = "path/to/aws_batch_compute_environment"

  compute_environment_name        = "my-compute-env"
  compute_environment_name_prefix = "my-prefix"

  compute_resources = {
    allocation_strategy = "BEST_FIT"
    bid_percentage      = 20
    desired_vcpus       = 10
    ec2_configuration = {
      image_id_override = "ami-12345678"
      image_type        = "ECS_AL2"
    }
    ec2_key_pair         = "my-keypair"
    instance_role        = "arn:aws:iam::123456789012:role/my-instance-role"
    instance_type       = ["c5.large", "m5.large"]
    launch_template     = {
      launch_template_id   = "lt-12345678"
      launch_template_name = "my-launch-template"
      version              = "1"
    }
    max_vcpus            = 100
    min_vcpus            = 10
    security_group_ids   = ["sg-12345678", "sg-87654321"]
    spot_iam_fleet_role  = "arn:aws:iam::123456789012:role/my-spot-fleet-role"
    subnets              = ["subnet-12345678", "subnet-87654321"]
    tags = {
      Name       = "my-compute-resources"
      Environment = "production"
    }
    type                 = "EC2"
  }

  eks_configuration = {
    eks_cluster_arn        = "arn:aws:eks:us-west-2:123456789012:cluster/my-eks-cluster"
    kubernetes_namespace  = "my-namespace"
  }

  service_role = "arn:aws:iam::123456789012:role/my-service-role"
  state        = "ENABLED"

  tags = {
    Name        = "my-compute-env"
    Environment = "production"
  }

  type = "MANAGED"
}



# when use condition 

module "aws_batch_compute_environment" {
  source = "path/to/aws_batch_compute_environment"

  compute_environment_name        = "my-compute-env"
  compute_environment_name_prefix = "my-prefix"

  type = var.type

  compute_resources = var.type == "EC2" ? {
    allocation_strategy = "BEST_FIT"
    bid_percentage      = 20
    desired_vcpus       = 10
    ec2_configuration = {
      image_id_override = "ami-12345678"
      image_type        = "ECS_AL2"
    }
    ec2_key_pair         = "my-keypair"
    instance_role        = "arn:aws:iam::123456789012:role/my-instance-role"
    instance_type       = ["c5.large", "m5.large"]
    launch_template     = {
      launch_template_id   = "lt-12345678"
      launch_template_name = "my-launch-template"
      version              = "1"
    }
    max_vcpus            = 100
    min_vcpus            = 10
    security_group_ids   = ["sg-12345678", "sg-87654321"]
    spot_iam_fleet_role  = "arn:aws:iam::123456789012:role/my-spot-fleet-role"
    subnets              = ["subnet-12345678", "subnet-87654321"]
    tags = {
      Name       = "my-compute-resources"
      Environment = "production"
    }
    type                 = "EC2"
  } : {
    eks_configuration = {
      eks_cluster_arn        = "arn:aws:eks:us-west-2:123456789012:cluster/my-eks-cluster"
      kubernetes_namespace  = "my-namespace"
    }
    service_role = "arn:aws:iam::123456789012:role/my-service-role"
    state        = "ENABLED"
    tags = {
      Name        = "my-compute-env"
      Environment = "production"
    }
    type = "MANAGED"
  }
}



#  main.tf

resource "aws_batch_compute_environment" "this" {
  compute_environment_name        = var.compute_environment_name
  compute_environment_name_prefix = var.compute_environment_name_prefix
  compute_resources              = var.compute_resources
  eks_configuration              = var.eks_configuration
  service_role                   = var.service_role
  state                          = var.state
  tags                           = var.tags
  type                           = var.type

  compute_resources {
    allocation_strategy   = var.compute_resources_allocation_strategy
    bid_percentage        = var.compute_resources_bid_percentage
    desired_vcpus         = var.compute_resources_desired_vcpus
    ec2_configuration     = var.compute_resources_ec2_configuration
    ec2_key_pair          = var.compute_resources_ec2_key_pair
    image_id              = var.compute_resources_image_id
    instance_role         = var.compute_resources_instance_role
    instance_type         = var.compute_resources_instance_type
    launch_template       = var.compute_resources_launch_template
    max_vcpus             = var.compute_resources_max_vcpus
    min_vcpus             = var.compute_resources_min_vcpus
    security_group_ids    = var.compute_resources_security_group_ids
    spot_iam_fleet_role   = var.compute_resources_spot_iam_fleet_role
    subnets               = var.compute_resources_subnets
    tags                  = var.compute_resources_tags
    type                  = var.compute_resources_type
  }

  ec2_configuration {
    image_id_override = var.ec2_configuration_image_id_override
    image_type        = var.ec2_configuration_image_type
  }

  launch_template {
    launch_template_id   = var.launch_template_launch_template_id
    launch_template_name = var.launch_template_launch_template_name
    version              = var.launch_template_version
  }

  eks_configuration {
    eks_cluster_arn        = var.eks_configuration_eks_cluster_arn
    kubernetes_namespace  = var.eks_configuration_kubernetes_namespace
  }
}




# variables.tf



variable "compute_environment_name" {
  description = "(Optional, Forces new resource) The name for your compute environment. Up to 128 letters (uppercase and lowercase), numbers, and underscores are allowed. If omitted, Terraform will assign a random, unique name."
  type        = string
}

variable "compute_environment_name_prefix" {
  description = "(Optional, Forces new resource) Creates a unique compute environment name beginning with the specified prefix. Conflicts with compute_environment_name."
  type        = string
}

variable "compute_resources" {
  description = "(Optional) Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments. See details below."
  type        = map(any)
}

variable "eks_configuration" {
  description = "(Optional) Details for the Amazon EKS cluster that supports the compute environment. See details below."
  type        = map(any)
}

variable "service_role" {
  description = "(Required) The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf."
  type        = string
}

variable "state" {
  description = "(Optional) The state of the compute environment. If the state is ENABLED, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Valid items are ENABLED or DISABLED. Defaults to ENABLED"
  type        = string
  default     = "ENABLED"
}

variable "tags" {
  description = "(Optional) Key-value map of resource tags. If configured with a provider default tags configuration block present, tags with matching keys will overwrite those defined at the provider-level."
  type        = map(any)
  default     = {}
}

variable "type" {
  description = "(Required) The type of the compute environment. Valid items are MANAGED or UNMANAGED"
  type        = string
}

variable "compute_resources_allocation_strategy" {
  description = "(Optional) The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Valid items are BEST_FIT_PROGRESSIVE, SPOT_CAPACITY_OPTIMIZED, or BEST_FIT. Defaults to BEST_FIT."
  type        = string
  default     = "BEST_FIT"
}

variable "compute_resources_bid_percentage" {
  description = "(Optional) Integer of maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (20), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. If you leave this field empty, the default value is 100% of the On-Demand price."
  type        = number
  default     = 100
}

variable "compute_resources_desired_vcpus" {
  description = "(Optional) The desired number of EC2 VCPUs in the compute environment."
  type        = number
  default     = null
}

variable "compute_resources_ec2_configuration" {
  description = "(Optional) Provides information used to select Amazon Machine Images (AMIs) for EC2 instances in the compute environment."
  type        = map(any)
  default     = {}
}

variable "compute_resources_ec2_key_pair" {
  description = "(Optional) The EC2 key pair that is used for instances launched in the compute environment."
  type        = string
  default     = null
}

variable "compute_resources_image_id" {
  description = "(Optional)
}

variable "compute_resources_instance_role" {
  description = "(Optional) The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment."
  type        = string
  default     = null
}

variable "compute_resources_instance_type" {
  description = "(Optional) A list of instance types that may be launched."
  type        = list(string)
  default     = null
}

variable "compute_resources_launch_template" {
  description = "(Optional) The launch template to use for your compute resources."
  type        = map(any)
  default     = null
}

variable "compute_resources_max_vcpus" {
  description = "(Required) The maximum number of EC2 VCPUs that an environment can reach."
  type        = number
}

variable "compute_resources_min_vcpus" {
  description = "(Optional) The minimum number of EC2 VCPUs that an environment should maintain."
  type        = number
  default     = null
}

variable "compute_resources_security_group_ids" {
  description = "(Optional) A list of EC2 security groups that are associated with instances launched in the compute environment."
  type        = list(string)
  default     = null
}

variable "compute_resources_spot_iam_fleet_role" {
  description = "(Optional) The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment."
  type        = string
  default     = null
}

variable "compute_resources_subnets" {
  description = "(Required) A list of VPC subnets into which the compute resources are launched."
  type        = list(string)
}

variable "compute_resources_tags" {
  description = "(Optional) Key-value pair tags to be applied to resources that are launched in the compute environment."
  type        = map(any)
  default     = null
}

variable "compute_resources_type" {
  description = "(Required) The type of compute environment. Valid items are EC2, SPOT, FARGATE, or FARGATE_SPOT."
  type        = string
}

variable "ec2_configuration_image_id_override" {
  description = "(Optional) The AMI ID used for instances launched in the compute environment that match the image type. This setting overrides the image_id argument in the compute_resources block."
  type        = string
  default     = null
}

variable "ec2_configuration_image_type" {
  description = "(Optional) The image type to match with the instance type to select an AMI. If the image_id_override parameter isn't specified, then a recent Amazon ECS-optimized Amazon Linux 2 AMI (ECS_AL2) is used."
  type        = string
  default     = null
}

variable "launch_template_launch_template_id" {
  description = "(Optional) ID of the launch template. You must specify either the launch template ID or launch template name in the request, but not both."
  type        = string
  default     = null
}

variable "launch_template_launch_template_name" {
  description = "(Optional) Name of the launch template."
  type        = string
  default     = null
}

variable "launch_template_version" {
  description = "(Optional) The version number of the launch template."
  type        = string
  default     = null
}

variable "eks_configuration_eks_cluster_arn" {
  description = "(Required) The Amazon Resource Name (ARN) of the Amazon EKS cluster."
  type        = string
}

variable "eks_configuration_kubernetes_namespace" {
  description = "(Required) The namespace of the Amazon EKS cluster.
}



# outputs.tf


output "arn" {
  description = "The Amazon Resource Name (ARN) of the compute environment."
  value       = module.aws_batch_compute_environment.this.arn
}

output "ecs_cluster_arn" {
  description = "The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster used by the compute environment."
  value       = module.aws_batch_compute_environment.this.ecs_cluster_arn
}

output "status" {
  description = "The current status of the compute environment."
  value       = module.aws_batch_compute_environment.this.status
}

output "status_reason" {
  description = "A short human-readable string to provide additional details about the current status of the compute environment."
  value       = module.aws_batch_compute_environment.this.status_reason
}

output "tags_all" {
  description = "A map of tags assigned to the resource, including those inherited from the provider default tags configuration block."
  value       = module.aws_batch_compute_environment.this.tags_all
}




